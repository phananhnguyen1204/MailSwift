{"version":3,"file":"outputModels.js","sourceRoot":"","sources":["../../../src/types/outputModels.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { ErrorModel } from \"@azure-rest/core-client\";\n\n/** Information about content filtering evaluated against generated model output. */\nexport interface ContentFilterResultsForChoiceOutput {\n  /**\n   * Describes language related to anatomical organs and genitals, romantic relationships,\n   *  acts portrayed in erotic or affectionate terms, physical sexual acts, including\n   *  those portrayed as an assault or a forced sexual violent act against one’s will,\n   *  prostitution, pornography, and abuse.\n   */\n  sexual?: ContentFilterResultOutput;\n  /**\n   * Describes language related to physical actions intended to hurt, injure, damage, or\n   * kill someone or something; describes weapons, etc.\n   */\n  violence?: ContentFilterResultOutput;\n  /**\n   * Describes language attacks or uses that include pejorative or discriminatory language\n   * with reference to a person or identity group on the basis of certain differentiating\n   * attributes of these groups including but not limited to race, ethnicity, nationality,\n   * gender identity and expression, sexual orientation, religion, immigration status, ability\n   * status, personal appearance, and body size.\n   */\n  hate?: ContentFilterResultOutput;\n  /**\n   * Describes language related to physical actions intended to purposely hurt, injure,\n   * or damage one’s body, or kill oneself.\n   */\n  self_harm?: ContentFilterResultOutput;\n  /** Describes whether profanity was detected. */\n  profanity?: ContentFilterDetectionResultOutput;\n  /** Describes detection results against configured custom blocklists. */\n  custom_blocklists?: Array<ContentFilterBlocklistIdResultOutput>;\n  /**\n   * Describes an error returned if the content filtering system is\n   * down or otherwise unable to complete the operation in time.\n   */\n  error?: ErrorModel;\n  /** Information about detection of protected text material. */\n  protected_material_text?: ContentFilterDetectionResultOutput;\n  /** Information about detection of protected code material. */\n  protected_material_code?: ContentFilterCitedDetectionResultOutput;\n}\n\n/** Represents the outcome of a detection operation against protected resources as performed by content filtering. */\nexport interface ContentFilterCitedDetectionResultOutput {\n  /** A value indicating whether or not the content has been filtered. */\n  filtered: boolean;\n  /** A value indicating whether detection occurred, irrespective of severity or whether the content was filtered. */\n  detected: boolean;\n  /** The internet location associated with the detection. */\n  URL?: string;\n  /** The license description associated with the detection. */\n  license: string;\n}\n\n/**\n * Represents the output results of Azure enhancements to chat completions, as configured via the matching input provided\n * in the request.\n */\nexport interface AzureChatEnhancementsOutput {\n  /** The grounding enhancement that returns the bounding box of the objects detected in the image. */\n  grounding?: AzureGroundingEnhancementOutput;\n}\n\n/** The grounding enhancement that returns the bounding box of the objects detected in the image. */\nexport interface AzureGroundingEnhancementOutput {\n  /** The lines of text detected by the grounding enhancement. */\n  lines: Array<AzureGroundingEnhancementLineOutput>;\n}\n\n/** A content line object consisting of an adjacent sequence of content elements, such as words and selection marks. */\nexport interface AzureGroundingEnhancementLineOutput {\n  /** The text within the line. */\n  text: string;\n  /** An array of spans that represent detected objects and its bounding box information. */\n  spans: Array<AzureGroundingEnhancementLineSpanOutput>;\n}\n\n/** A span object that represents a detected object and its bounding box information. */\nexport interface AzureGroundingEnhancementLineSpanOutput {\n  /** The text content of the span that represents the detected object. */\n  text: string;\n  /**\n   * The character offset within the text where the span begins. This offset is defined as the position of the first\n   * character of the span, counting from the start of the text as Unicode codepoints.\n   */\n  offset: number;\n  /** The length of the span in characters, measured in Unicode codepoints. */\n  length: number;\n  /** An array of objects representing points in the polygon that encloses the detected object. */\n  polygon: Array<AzureGroundingEnhancementCoordinatePointOutput>;\n}\n\n/** A representation of a single polygon point as used by the Azure grounding enhancement. */\nexport interface AzureGroundingEnhancementCoordinatePointOutput {\n  /** The x-coordinate (horizontal axis) of the point. */\n  x: number;\n  /** The y-coordinate (vertical axis) of the point. */\n  y: number;\n}\n\n/** An abstract representation of structured information about why a chat completions response terminated. */\nexport interface ChatFinishDetailsOutputParent {\n  /** The object type. */\n  type: string;\n}\n\n/** A structured representation of a stop reason that signifies natural termination by the model. */\nexport interface StopFinishDetailsOutput extends ChatFinishDetailsOutputParent {\n  /** The object type, which is always 'stop' for this object. */\n  type: \"stop\";\n  /** The token sequence that the model terminated with. */\n  stop: string;\n}\n\n/**\n * A structured representation of a stop reason that signifies a token limit was reached before the model could naturally\n * complete.\n */\nexport interface MaxTokensFinishDetailsOutput extends ChatFinishDetailsOutputParent {\n  /** The object type, which is always 'max_tokens' for this object. */\n  type: \"max_tokens\";\n}\n\n/**\n *   A representation of the additional context information available when Azure OpenAI chat extensions are involved\n *   in the generation of a corresponding chat completions response. This context information is only populated when\n *   using an Azure OpenAI request configured to use a matching extension.\n */\nexport interface AzureChatExtensionsMessageContextOutput {\n  /**\n   *   The contextual information associated with the Azure chat extensions used for a chat completions request.\n   *   These messages describe the data source retrievals, plugin invocations, and other intermediate steps taken in the\n   *   course of generating a chat completions response that was augmented by capabilities from Azure OpenAI chat\n   *   extensions.\n   */\n  citations?: Array<AzureChatExtensionDataSourceResponseCitationOutput>;\n  /** The detected intent from the chat history, used to pass to the next turn to carry over the context. */\n  intent?: string;\n}\n\n/**\n *   A representation of the additional context information available when Azure OpenAI chat extensions are involved\n *   in the generation of a corresponding chat completions response. This context information is only populated when\n *   using an Azure OpenAI request configured to use a matching extension.\n */\nexport interface AzureChatExtensionsMessageContextOutput {\n  /**\n   *   The contextual information associated with the Azure chat extensions used for a chat completions request.\n   *   These messages describe the data source retrievals, plugin invocations, and other intermediate steps taken in the\n   *   course of generating a chat completions response that was augmented by capabilities from Azure OpenAI chat\n   *   extensions.\n   */\n  citations?: Array<AzureChatExtensionDataSourceResponseCitationOutput>;\n  /** The detected intent from the chat history, used to pass to the next turn to carry over the context. */\n  intent?: string;\n}\n\n/** Content filtering results for a single prompt in the request. */\nexport interface ContentFilterResultsForPromptOutput {\n  /** The index of this prompt in the set of prompt results */\n  prompt_index: number;\n  /** Content filtering results for this prompt */\n  content_filter_results: ContentFilterResultDetailsForPromptOutput;\n}\n\n/** Information about content filtering evaluated against input data to Azure OpenAI. */\nexport interface ContentFilterResultDetailsForPromptOutput {\n  /**\n   * Describes language related to anatomical organs and genitals, romantic relationships,\n   *  acts portrayed in erotic or affectionate terms, physical sexual acts, including\n   *  those portrayed as an assault or a forced sexual violent act against one’s will,\n   *  prostitution, pornography, and abuse.\n   */\n  sexual?: ContentFilterResultOutput;\n  /**\n   * Describes language related to physical actions intended to hurt, injure, damage, or\n   * kill someone or something; describes weapons, etc.\n   */\n  violence?: ContentFilterResultOutput;\n  /**\n   * Describes language attacks or uses that include pejorative or discriminatory language\n   * with reference to a person or identity group on the basis of certain differentiating\n   * attributes of these groups including but not limited to race, ethnicity, nationality,\n   * gender identity and expression, sexual orientation, religion, immigration status, ability\n   * status, personal appearance, and body size.\n   */\n  hate?: ContentFilterResultOutput;\n  /**\n   * Describes language related to physical actions intended to purposely hurt, injure,\n   * or damage one’s body, or kill oneself.\n   */\n  self_harm?: ContentFilterResultOutput;\n  /** Describes whether profanity was detected. */\n  profanity?: ContentFilterDetectionResultOutput;\n  /** Describes detection results against configured custom blocklists. */\n  custom_blocklists?: Array<ContentFilterBlocklistIdResultOutput>;\n  /**\n   * Describes an error returned if the content filtering system is\n   * down or otherwise unable to complete the operation in time.\n   */\n  error?: ErrorModel;\n  /** Whether a jailbreak attempt was detected in the prompt. */\n  jailbreak?: ContentFilterDetectionResultOutput;\n}\n\n/** Information about filtered content severity level and if it has been filtered or not. */\nexport interface ContentFilterResultOutput {\n  /**\n   * Ratings for the intensity and risk level of filtered content.\n   *\n   * Possible values: \"safe\", \"low\", \"medium\", \"high\"\n   */\n  severity: string;\n  /** A value indicating whether or not the content has been filtered. */\n  filtered: boolean;\n}\n\n/** Represents the outcome of a detection operation performed by content filtering. */\nexport interface ContentFilterDetectionResultOutput {\n  /** A value indicating whether or not the content has been filtered. */\n  filtered: boolean;\n  /** A value indicating whether detection occurred, irrespective of severity or whether the content was filtered. */\n  detected: boolean;\n}\n\n/** Represents the outcome of an evaluation against a custom blocklist as performed by content filtering. */\nexport interface ContentFilterBlocklistIdResultOutput {\n  /** The ID of the custom blocklist evaluated. */\n  id: string;\n  /** A value indicating whether or not the content has been filtered. */\n  filtered: boolean;\n}\n\n/** A representation of a single polygon point as used by the Azure grounding enhancement. */\nexport interface AzureGroundingEnhancementCoordinatePointOutput {\n  /** The x-coordinate (horizontal axis) of the point. */\n  x: number;\n  /** The y-coordinate (vertical axis) of the point. */\n  y: number;\n}\n\n/** A content line object consisting of an adjacent sequence of content elements, such as words and selection marks. */\nexport interface AzureGroundingEnhancementLineOutput {\n  /** The text within the line. */\n  text: string;\n  /** An array of spans that represent detected objects and its bounding box information. */\n  spans: Array<AzureGroundingEnhancementLineSpanOutput>;\n}\n\n/** A span object that represents a detected object and its bounding box information. */\nexport interface AzureGroundingEnhancementLineSpanOutput {\n  /** The text content of the span that represents the detected object. */\n  text: string;\n  /**\n   * The character offset within the text where the span begins. This offset is defined as the position of the first\n   * character of the span, counting from the start of the text as Unicode codepoints.\n   */\n  offset: number;\n  /** The length of the span in characters, measured in Unicode codepoints. */\n  length: number;\n  /** An array of objects representing points in the polygon that encloses the detected object. */\n  polygon: Array<AzureGroundingEnhancementCoordinatePointOutput>;\n}\n\n/** The grounding enhancement that returns the bounding box of the objects detected in the image. */\nexport interface AzureGroundingEnhancementOutput {\n  /** The lines of text detected by the grounding enhancement. */\n  lines: Array<AzureGroundingEnhancementLineOutput>;\n}\n\n/**\n * A single instance of additional context information available when Azure OpenAI chat extensions are involved\n * in the generation of a corresponding chat completions response. This context information is only populated when\n * using an Azure OpenAI request configured to use a matching extension.\n */\nexport interface AzureChatExtensionDataSourceResponseCitationOutput {\n  /** The content of the citation. */\n  content: string;\n  /** The title of the citation. */\n  title?: string;\n  /** The URL of the citation. */\n  url?: string;\n  /** The file path of the citation. */\n  filepath?: string;\n  /** The chunk ID of the citation. */\n  chunk_id?: string;\n}\n\n/** An abstract representation of structured information about why a chat completions response terminated. */\nexport type ChatFinishDetailsOutput =\n  | ChatFinishDetailsOutputParent\n  | StopFinishDetailsOutput\n  | MaxTokensFinishDetailsOutput;\n"]}